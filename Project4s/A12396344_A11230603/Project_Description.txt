
For this project, my partner and I again took a very took a very CS fundamental view when coding this project. Our implementation was similar to PA3 in terms of functionality wheres we used a lot of inheritance and polymorphism principles. We spent a lot of time understanding the classes and scoping out how we would go about this project before actually coding it. This helped in the long run

We initially started off in irgen.cc adding all the types and creating helper functions to get the types of objects. 

We then took our symbol table from PA3 and completely re did it. We kept the same logic as before, but instead our symbol table had 1 vector where each element in the vector was of type symbol. Each symbol would be a scope and had its own functions for adding elements into that symbol scope, deleting, and etc. 
possible. 

We had emit functions similar to check functions in PA3 throughout PA4. We started off by creating the emits for fndecl, vardecl. and the various statements such as if/while/switch. These would be the base of the expressions so we decided to implement and test this functionality first. 

We then moved onto expressions. This became a lot of work to code and debug because there are so many cases to cover. The most difficult case to cover was swizzle and vectors. For swizzle, we created several helper functions that would get the index of a specific swizzle in the vector. We also added a helper function to get the type of an operator which would make assign and arithmetic expressions a bit easier to debug. 

Implementing the vectors thought the arithmetic and assign was also very tedious. We needed to do a lot of checks to make sure that we were handling vectors only when we were 100% sure that the type we were working with was of type vector. Initially we had a lot of hard coded checks, but then we optimized by using the lllvm:type functions to check the type. 

Another thing that we added to expressions was the use of PHINode in conditionals. This initially took a lot of time instead of simply using SelectInst but its functionality would cover a lot more test cases. 







